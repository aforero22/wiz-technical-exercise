name: CI App
on:
  # Comentado para ejecución manual únicamente
  #push:
  #  paths:
  #    - 'app/**'
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: wiz-app
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd app
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7 # O la versión que estés usando
      
      - name: Terraform Init
        run: terraform init
        working-directory: infra
      
      - name: Configure kubectl
        run: |
          aws eks update-kubeconfig --name wiz-cluster-new --region us-east-1
      
      - name: Set Output Env Vars
        run: |
          echo "Getting raw outputs and cleaning..."
          cd infra
          
          # Obtener outputs directamente y limpiar mensajes de debug
          echo "Getting MONGO_IP..."
          MONGO_IP=$(terraform output -raw mongo_private_ip | tail -n +2 | sed 's/::debug::.*$//')
          echo "MONGO_IP: [$MONGO_IP]"
          
          echo "Getting ECR_URL..."
          ECR_URL=$(terraform output -raw ecr_repository_url | tail -n +2 | sed 's/::debug::.*$//')
          echo "ECR_URL: [$ECR_URL]"
          
          # Verificar que los valores no estén vacíos
          if [ -z "$MONGO_IP" ] || [ -z "$ECR_URL" ]; then
            echo "Error: Failed to extract required values"
            echo "MONGO_IP is empty: $([ -z "$MONGO_IP" ] && echo "yes" || echo "no")"
            echo "ECR_URL is empty: $([ -z "$ECR_URL" ] && echo "yes" || echo "no")"
            exit 1
          fi
          
          # Escribir en GITHUB_ENV
          echo "MONGO_IP=$MONGO_IP" >> $GITHUB_ENV
          echo "ECR_URL=$ECR_URL" >> $GITHUB_ENV
          echo "Wrote cleaned values to GITHUB_ENV"
        shell: /usr/bin/bash -e {0}
        env:
          AWS_DEFAULT_REGION: us-east-1
          AWS_REGION: us-east-1
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TERRAFORM_CLI_PATH: ${{ env.TERRAFORM_CLI_PATH }}
      
      - name: Deploy to EKS
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          export KUBECONFIG="$HOME/.kube/config"
          
          echo "KUBECONFIG=$KUBECONFIG"
          echo "--- Kubeconfig contents ---"
          cat $KUBECONFIG || echo "Kubeconfig file not found or unreadable"
          echo "--- End Kubeconfig ---"
          
          cd app/k8s
          
          echo "Valor de ECR_URL antes de sed: [$ECR_URL]"
          echo "Valor de MONGO_IP antes de sed: [$MONGO_IP]"
          
          # Crear un archivo temporal con los valores correctos
          cat > deployment.yaml.tmp << EOF
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: wiz-app
            labels:
              app: wiz-app
          spec:
            replicas: 2
            selector:
              matchLabels:
                app: wiz-app
            template:
              metadata:
                labels:
                  app: wiz-app
              spec:
                securityContext:
                  runAsUser: 0
                  runAsGroup: 0
                  fsGroup: 0
                containers:
                  - name: wiz-app
                    image: "${ECR_URL}:${IMAGE_TAG}"
                    env:
                      - name: MONGODB_URI
                        value: "mongodb://${MONGO_IP}:27017/wizdb"
                    resources:
                      limits:
                        cpu: "0.5"
                        memory: "512Mi"
                      requests:
                        cpu: "250m"
                        memory: "50Mi"
          EOF
          
          mv deployment.yaml.tmp deployment.yaml
          
          echo "--- Contenido deployment.yaml después de sed ---"
          cat deployment.yaml || echo "Error leyendo deployment.yaml"
          echo "--- Fin deployment.yaml ---"
          
          kubectl apply -f . --validate=false
          
          # Esperar a que el deployment esté disponible
          echo "Esperando a que el deployment esté disponible..."
          kubectl rollout status deployment/wiz-app || true
          
          # Obtener los logs del contenedor
          echo "Obteniendo logs del contenedor..."
          POD_NAME=$(kubectl get pods -l app=wiz-app -o jsonpath="{.items[0].metadata.name}")
          echo "Nombre del pod: $POD_NAME"
          
          # Esperar un poco para que el pod tenga tiempo de iniciar
          sleep 10
          
          echo "--- Logs del contenedor ---"
          kubectl logs $POD_NAME || echo "No se pudieron obtener los logs"
          echo "--- Fin de los logs ---"
          
          # Obtener descripción del pod para más detalles
          echo "--- Descripción del pod ---"
          kubectl describe pod $POD_NAME || echo "No se pudo obtener la descripción del pod"
          echo "--- Fin de la descripción ---"