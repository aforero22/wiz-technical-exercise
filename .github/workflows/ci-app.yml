name: CI App
on:
  # Comentado para ejecución manual únicamente
  #push:
  #  paths:
  #    - 'app/**'
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: wiz-app
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd app
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7 # O la versión que estés usando
      
      - name: Terraform Init
        run: terraform init
        working-directory: infra
      
      - name: Configure kubectl
        run: |
          aws eks update-kubeconfig --name wiz-cluster-new --region us-east-1
      
      - name: Terraform Plan for Outputs
        id: plan
        run: |
          cd infra
          # Solo generar el plan, la salida se extraerá en el siguiente paso
          terraform plan -out=tfplan
        working-directory: infra
      
      - name: Extract Terraform Outputs
        id: vars
        run: |
          # Instalar jq si no está disponible (runners de Ubuntu suelen tenerlo)
          # sudo apt-get update && sudo apt-get install -y jq 
          cd infra
          echo "Extracting outputs from tfplan..."
          MONGO_IP=$(terraform show -json tfplan | jq -r '.outputs.mongo_public_ip.value')
          ECR_URL=$(terraform show -json tfplan | jq -r '.outputs.ecr_repository_url.value')
          
          # Verificar valores extraídos
          echo "Extracted MONGO_IP: [$MONGO_IP]"
          echo "Extracted ECR_URL: [$ECR_URL]"
          
          # Escribir en GITHUB_ENV
          echo "MONGO_IP=$MONGO_IP" >> $GITHUB_ENV
          echo "ECR_URL=$ECR_URL" >> $GITHUB_ENV
          echo "Wrote values to GITHUB_ENV"
      
      - name: Deploy to EKS
        env:
          IMAGE_TAG: ${{ github.sha }}
          # Las variables MONGO_IP y ECR_URL ahora vienen de GITHUB_ENV
        run: |
          # Exportar KUBECONFIG explícitamente en el script
          export KUBECONFIG="$HOME/.kube/config"
          
          # Debug: Verificar la variable y el archivo
          echo "KUBECONFIG=$KUBECONFIG"
          echo "--- Kubeconfig contents ---"
          cat $KUBECONFIG || echo "Kubeconfig file not found or unreadable"
          echo "--- End Kubeconfig ---"
          
          # Proceder con el despliegue
          cd app/k8s
          
          # Debug: Verificar las variables ANTES de sed
          echo "Valor de ECR_URL antes de sed: [$ECR_URL]"
          echo "Valor de MONGO_IP antes de sed: [$MONGO_IP]"
          
          # Reemplazar variables en los manifiestos
          sed -i "s|\${ECR_URL}|${ECR_URL}|g; s|\${MONGO_IP}|${MONGO_IP}|g" *.yaml
          
          # Debug: Mostrar el contenido de deployment.yaml DESPUÉS de sed
          echo "--- Contenido deployment.yaml después de sed ---"
          cat deployment.yaml || echo "Error leyendo deployment.yaml"
          echo "--- Fin deployment.yaml ---"
          
          # Aplicar los manifiestos (desactivando validación)
          kubectl apply -f . --validate=false
          # Verificar el despliegue
          kubectl rollout status deployment/wiz-app