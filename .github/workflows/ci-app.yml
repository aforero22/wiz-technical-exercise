name: CI App
on:
  # Comentado para ejecución manual únicamente
  #push:
  #  paths:
  #    - 'app/**'
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: wiz-app
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd app
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7 # O la versión que estés usando
      
      - name: Terraform Init
        run: terraform init
        working-directory: infra
      
      - name: Configure kubectl
        run: |
          aws eks update-kubeconfig --name wiz-cluster-new --region us-east-1
      
      - name: Set Output Env Vars
        run: |
          echo "Getting raw outputs and cleaning..."
          cd infra
          
          # Obtener outputs directamente y limpiar mensajes de debug
          echo "Getting MONGO_IP..."
          MONGO_IP=$(terraform output -raw mongo_private_ip | tail -n +2 | sed 's/::debug::.*$//')
          echo "MONGO_IP: [$MONGO_IP]"
          
          echo "Getting MONGO_PUBLIC_IP..."
          MONGO_PUBLIC_IP=$(terraform output -raw mongo_public_ip | tail -n +2 | sed 's/::debug::.*$//')
          echo "MONGO_PUBLIC_IP: [$MONGO_PUBLIC_IP]"
          
          echo "Getting ECR_URL..."
          ECR_URL=$(terraform output -raw ecr_repository_url | tail -n +2 | sed 's/::debug::.*$//')
          echo "ECR_URL: [$ECR_URL]"
          
          # Verificar que los valores no estén vacíos
          if [ -z "$MONGO_IP" ] || [ -z "$ECR_URL" ]; then
            echo "Error: Failed to extract required values"
            echo "MONGO_IP is empty: $([ -z "$MONGO_IP" ] && echo "yes" || echo "no")"
            echo "ECR_URL is empty: $([ -z "$ECR_URL" ] && echo "yes" || echo "no")"
            exit 1
          fi
          
          # Escribir en GITHUB_ENV
          echo "MONGO_IP=$MONGO_IP" >> $GITHUB_ENV
          echo "MONGO_PUBLIC_IP=$MONGO_PUBLIC_IP" >> $GITHUB_ENV
          echo "ECR_URL=$ECR_URL" >> $GITHUB_ENV
          echo "Wrote cleaned values to GITHUB_ENV"
        shell: /usr/bin/bash -e {0}
        env:
          AWS_DEFAULT_REGION: us-east-1
          AWS_REGION: us-east-1
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TERRAFORM_CLI_PATH: ${{ env.TERRAFORM_CLI_PATH }}
      
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install awscli
      
      - name: Get MongoDB Private IP
        id: get_mongo_ip
        run: |
          echo "MONGO_IP=$(terraform -chdir=infra output -raw mongo_private_ip)" >> $GITHUB_ENV
      
      - name: Set up Kubeconfig
        run: aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME }}
      
      - name: Replace Placeholders in Deployment
        run: |
          sed -i "s|\${MONGO_IP}|${{ env.MONGO_IP }}|g" app/k8s/deployment.yaml
          sed -i "s|\${ECR_URL}|${{ steps.login-ecr.outputs.registry }}|g" app/k8s/deployment.yaml
      
      - name: Deploy to EKS
        run: |
          echo "Applying deployment yaml..."
          # kubectl debería usar $HOME/.kube/config por defecto, actualizado por 'aws eks update-kubeconfig'
          kubectl apply -f app/k8s/deployment.yaml
          
          echo "Deployment applied. Waiting for rollout status..."
          kubectl rollout status deployment/wiz-app --timeout=120s # Aumentado timeout

      - name: Get Pod Info for Diagnosis
        if: failure() # Ejecutar solo si el paso anterior falla o hace timeout
        run: |
          echo "Deployment failed or timed out. Getting pod info..."
          # kubectl debería usar $HOME/.kube/config por defecto
          kubectl get pods -l app=wiz-app -o wide
          PODS=$(kubectl get pods -l app=wiz-app -o jsonpath='{.items[*].metadata.name}')
          for POD in $PODS; do
            echo "--- Describe pod $POD ---"
            kubectl describe pod $POD || echo "Could not describe pod $POD"
            echo "--- Logs for pod $POD (last 50 lines) ---"
            kubectl logs $POD --tail=50 || echo "Could not get logs for pod $POD"
          done